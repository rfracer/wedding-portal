type User {
  id: ID!
  name: String!
  email: String!
  password: String!
  services: [Service]
}

type Service {
  id: ID!
  name: String!
  category: String!
  city: String!
  phone: String!
  email: String!
  website: String
  photoURL: String!
  about: String!
  price: String!
  authorEmail: String!
}

input ServiceInput {
  name: String
  category: String
  city: String
  phone: String
  website: String
  email: String
  photoURL: String
  about: String
  price: String
  authorEmail: String
}

type Query {
  info: String!
  user(email: String): User
  services(category: String, city: String): [Service]!
  service(id: ID!): Service
}

type Mutation {
  createService(input: ServiceInput!, author: String!): Service
  updateService(id: ID!, input: ServiceInput): Service
  deleteService(id: ID!): Service
  signup(email: String!, password: String!, name: String!): AuthPayload
}

type AuthPayload {
  user: User
}
